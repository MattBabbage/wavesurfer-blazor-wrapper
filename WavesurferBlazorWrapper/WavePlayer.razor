@using Microsoft.JSInterop;
@inject IJSRuntime _js

<div class="border mb-1">
    <div id="waveform"></div>
    @if(ShowTimeline) {
        <div id="wave-timeline"></div>
    }
</div>
@if (ShowMinimap)
{
    <div class="bg-light mb-2">
        <div id="wave-minimap"></div>
    </div>
}
@if (ShowDefaultToolbar)
{
    <div class="d-flex flex-row justify-content-between align-items-center">
        <div>
            <button class="btn btn-primary mr-2" @onclick="() => PlayPause()" aria-label="Play/Pause">@TextPlayPause</button>
        </div>
        <div>
            <div class="d-flex flex-row align-items-center">
                <span class="mr-2">@TextZoom</span>
                <div class="btn-group btn-group-sm" role="group" aria-label="Zoom values">
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 0 ? "active":"")" @onclick="() => ZoomLevel(0)">@TextDefault</button>
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 2 ? "active":"")" @onclick="() => ZoomLevel(2)">2x</button>
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 4 ? "active":"")" @onclick="() => ZoomLevel(4)">4x</button>
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 8 ? "active":"")" @onclick="() => ZoomLevel(8)">8x</button>
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 16 ? "active":"")" @onclick="() => ZoomLevel(16)">16x</button>
                    <button type="button" class="btn btn-secondary @(actualZoomLevel == 32 ? "active":"")" @onclick="() => ZoomLevel(32)">32x</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private WavesurferJsInterop? interop;
    private int actualZoomLevel = 0;

    [Parameter]
    public EventCallback<float> OnReady { get; set; }
    [Parameter]
    public EventCallback<float> OnAudioProcess { get; set; }
    [Parameter]
    public EventCallback<float> OnSeek { get; set; }
    [Parameter]
    public string Url { get; set; }
    [Parameter]
    public bool ShowDefaultToolbar { get; set; } = false;
    [Parameter]
    public bool ShowTimeline { get; set; } = true;
    [Parameter]
    public bool ShowMinimap { get; set; } = true;
    [Parameter]
    public string TextPlayPause { get; set; } = "Play/Pause";
    [Parameter]
    public string TextZoom { get; set; } = "Zoom";
    [Parameter]
    public string TextDefault { get; set; } = "Default";

    public async Task LoadFile(string url)
    {
        await interop.LoadFile(Url);
    }

    public async Task PlayPause()
    {
        await interop.PlayPause();
    }

    public async Task SeekTo(float seek)
    {
        await interop.SeekTo(seek);
    }

    public async Task ZoomLevel(int zoom)
    {
        actualZoomLevel = zoom;
        await interop.ZoomValueChangedHandler(zoom);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //starting upon rendering target divs
            await interop.Create();
            
            //preload file if URL supplied
            if (Url != null)
            {
                await interop.LoadFile(Url);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        interop = new WavesurferJsInterop(_js, DotNetObjectReference.Create<WavePlayer>(this));
    }

    [JSInvokable]
    public async Task OnWavesurferReady(float duration)
    {
        await OnReady.InvokeAsync(duration);
    }

    [JSInvokable]
    public async Task OnWavesurferAudioProcess(float position)
    {
        await OnAudioProcess.InvokeAsync(position);
    }

    [JSInvokable]
    public async Task OnWavesurferSeek(float seekCoef)
    {
        await OnSeek.InvokeAsync(seekCoef);
    }

    public void Dispose()
    {
        
    }
}


