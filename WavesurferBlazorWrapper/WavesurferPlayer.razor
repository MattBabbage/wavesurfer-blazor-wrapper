@using Microsoft.JSInterop;
@inject IJSRuntime _js

<div class="wavesurfer-ui-container">
    <div class="wavesurfer-ui-main" id="sel_@_mainDivGuid"></div>
    @if(ShowTimeline) {
        <div class="wavesurfer-ui-timeline" id="sel_@_timelineDivGuid"></div>
    }
    @if (ShowMinimap)
    {
        <div class="wavesurfer-ui-minimap" id="sel_@_minimapDivGuid"></div>
    }
</div>
@if (ShowDefaultToolbar)
{
    <div class="wavesurfer-ui-toolbar d-flex flex-row justify-content-between align-items-center">
        <div class="wavesurfer-ui-toolbar-left">
            <button class="btn btn-primary mr-2" @onclick="PlayPause" aria-label="Play/Pause">@TextPlayPause</button>
        </div>
        <div class="wavesurfer-ui-toolbar-right">
            <div class="d-flex flex-row align-items-center">
                <span class="mr-2">@TextZoom</span>
                <div class="btn-group btn-group-sm" role="group" aria-label="Zoom values">
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 0 ? "active":"")" @onclick="() => Zoom(0)">@TextDefault</button>
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 2 ? "active":"")" @onclick="() => Zoom(2)">2x</button>
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 4 ? "active":"")" @onclick="() => Zoom(4)">4x</button>
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 8 ? "active":"")" @onclick="() => Zoom(8)">8x</button>
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 16 ? "active":"")" @onclick="() => Zoom(16)">16x</button>
                    <button type="button" class="btn btn-secondary @(_actualZoomLevel == 32 ? "active":"")" @onclick="() => Zoom(32)">32x</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private WavesurferJsInterop? _interop;
    private int _actualZoomLevel = 0;

    private Guid _mainDivGuid;
    private Guid _timelineDivGuid;
    private Guid _minimapDivGuid;

    //Component parameters
    [Parameter]
    public EventCallback OnReady { get; set; }
    [Parameter]
    public EventCallback<float> OnAudioProcess { get; set; }
    [Parameter]
    public EventCallback<float> OnSeek { get; set; }
    [Parameter]
    public string? Url { get; set; }
    [Parameter]
    public bool ShowDefaultToolbar { get; set; } = false;
    [Parameter]
    public bool ShowTimeline { get; set; } = true;
    [Parameter]
    public bool ShowMinimap { get; set; } = true;
    [Parameter]
    public string TextPlayPause { get; set; } = "Play/Pause";
    [Parameter]
    public string TextZoom { get; set; } = "Zoom";
    [Parameter]
    public string TextDefault { get; set; } = "Default";

    //External methods
    public async Task Load(string url)
    {
        if (_interop != null)
        {
            var module = await _interop.GetModuleTask();
            await module.InvokeVoidAsync("load", url);
        }
    }

    public async Task PlayPause()
    {
        if (_interop != null)
        {
            var module = await _interop.GetModuleTask();
            await module.InvokeVoidAsync("playPause");
        }
    }

    public async Task SeekAndCenter(float seek)
    {
        if (_interop != null)
        {
            var module = await _interop.GetModuleTask();
            await module.InvokeVoidAsync("seekAndCenter", seek);
        }
    }

    public async Task Zoom(int pxPerSec)
    {
        _actualZoomLevel = pxPerSec;
        if (_interop != null)
        {
            var module = await _interop.GetModuleTask();
            await module.InvokeVoidAsync("zoom", pxPerSec);
        }
    }

    //Internal component methods
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //starting upon rendering target divs
            if (_interop != null)
            {
                await _interop.Create(_mainDivGuid, _timelineDivGuid, _minimapDivGuid);

                //preload file if URL supplied
                if (Url != null)
                {
                    await _interop.Load(Url);
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        _mainDivGuid = Guid.NewGuid();
        _timelineDivGuid = Guid.NewGuid();
        _minimapDivGuid = Guid.NewGuid();
        _interop = new WavesurferJsInterop(_js, DotNetObjectReference.Create<WavesurferPlayer>(this));
    }

    public void Dispose()
    {
        
    }

    //JS Events
    [JSInvokable]
    public async Task OnWavesurferReady()
    {
        await OnReady.InvokeAsync();
    }

    [JSInvokable]
    public async Task OnWavesurferAudioProcess(float position)
    {
        await OnAudioProcess.InvokeAsync(position);
    }

    [JSInvokable]
    public async Task OnWavesurferSeek(float seekCoef)
    {
        await OnSeek.InvokeAsync(seekCoef);
    }

}


